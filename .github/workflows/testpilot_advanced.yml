name: 'TestPilot Advanced CI/CD'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      enhanced_mode:
        description: 'Use enhanced test generation mode'
        required: false
        default: 'true'
        type: boolean
      ai_provider:
        description: 'AI provider to use'
        required: false
        default: 'openai'
        type: choice
        options:
          - openai
          - anthropic
          - ollama

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      python-files: ${{ steps.changes.outputs.python-files }}
      has-python-changes: ${{ steps.changes.outputs.has-python-changes }}
      test-files: ${{ steps.changes.outputs.test-files }}
      needs-tests: ${{ steps.changes.outputs.needs-tests }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze file changes
        id: changes
        run: |
          # Get changed Python files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '\.py$' || echo "")
          
          # Filter out test files and get source files
          PYTHON_FILES=$(echo "$CHANGED_FILES" | grep -v '^test_' | grep -v '/test_' | tr '\n' ' ')
          TEST_FILES=$(echo "$CHANGED_FILES" | grep -E '(^test_|/test_)' | tr '\n' ' ')
          
          echo "python-files=$PYTHON_FILES" >> $GITHUB_OUTPUT
          echo "test-files=$TEST_FILES" >> $GITHUB_OUTPUT
          echo "has-python-changes=$([[ -n \"$PYTHON_FILES\" ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "needs-tests=$([[ -n \"$PYTHON_FILES\" ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          
          echo "Changed Python files: $PYTHON_FILES"
          echo "Changed test files: $TEST_FILES"

  setup-testpilot:
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.has-python-changes == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install TestPilot
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          
      - name: Verify TestPilot installation
        run: |
          python -m testpilot.cli --help
          python -m testpilot.cli providers

  generate-tests:
    runs-on: ubuntu-latest
    needs: [analyze-changes, setup-testpilot]
    if: needs.analyze-changes.outputs.needs-tests == 'true'
    strategy:
      matrix:
        provider: [openai, anthropic]
        include:
          - provider: openai
            model: gpt-4o
          - provider: anthropic
            model: claude-3-sonnet-20240229
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install TestPilot
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          
      - name: Generate tests for changed files
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Create output directory
          mkdir -p generated_tests_ci
          
          # Generate tests for each changed Python file
          for file in ${{ needs.analyze-changes.outputs.python-files }}; do
            if [[ -f "$file" ]]; then
              echo "🧪 Generating tests for $file using ${{ matrix.provider }}"
              
              # Use enhanced mode based on input or default
              ENHANCED_FLAG=""
              if [[ "${{ github.event.inputs.enhanced_mode }}" == "true" || "${{ github.event_name }}" != "workflow_dispatch" ]]; then
                ENHANCED_FLAG="--enhanced"
              fi
              
              python -m testpilot.cli generate "$file" \
                --provider "${{ matrix.provider }}" \
                --model "${{ matrix.model }}" \
                --output-dir generated_tests_ci \
                $ENHANCED_FLAG \
                || echo "⚠️ Failed to generate tests for $file"
            fi
          done
          
      - name: Upload generated tests
        uses: actions/upload-artifact@v3
        with:
          name: generated-tests-${{ matrix.provider }}
          path: generated_tests_ci/
          retention-days: 7

  run-tests:
    runs-on: ubuntu-latest
    needs: [analyze-changes, generate-tests]
    if: needs.analyze-changes.outputs.needs-tests == 'true'
    strategy:
      matrix:
        provider: [openai, anthropic]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install TestPilot
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          
      - name: Download generated tests
        uses: actions/download-artifact@v3
        with:
          name: generated-tests-${{ matrix.provider }}
          path: generated_tests_ci/
          
      - name: Run generated tests with coverage
        run: |
          # Run tests and collect coverage
          for test_file in generated_tests_ci/test_*.py; do
            if [[ -f "$test_file" ]]; then
              echo "🏃 Running tests in $test_file"
              python -m testpilot.cli run "$test_file" --coverage || echo "⚠️ Tests failed in $test_file"
            fi
          done
          
      - name: Generate coverage report
        run: |
          # Generate comprehensive coverage report
          if ls generated_tests_ci/test_*.py 1> /dev/null 2>&1; then
            echo "📊 Generating coverage report"
            python -m pytest generated_tests_ci/ --cov=. --cov-report=html --cov-report=xml --cov-report=term
          fi
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ matrix.provider }}
          path: |
            htmlcov/
            coverage.xml
          retention-days: 7

  analyze-coverage:
    runs-on: ubuntu-latest
    needs: [analyze-changes, run-tests]
    if: needs.analyze-changes.outputs.needs-tests == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install TestPilot
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-report-openai
          path: coverage_openai/
          
      - name: Download coverage reports (Anthropic)
        uses: actions/download-artifact@v3
        with:
          name: coverage-report-anthropic
          path: coverage_anthropic/
          
      - name: Analyze coverage differences
        run: |
          echo "📊 Analyzing coverage between providers"
          
          # Compare coverage between providers
          if [[ -f "coverage_openai/coverage.xml" && -f "coverage_anthropic/coverage.xml" ]]; then
            echo "Comparing coverage between OpenAI and Anthropic generated tests"
            # This would include custom coverage comparison logic
          fi
          
      - name: Generate coverage summary
        id: coverage-summary
        run: |
          # Generate a summary of coverage results
          SUMMARY="## 📊 TestPilot Coverage Analysis\n\n"
          SUMMARY+="### Generated Tests Coverage\n"
          
          # Add coverage details for each provider
          for provider in openai anthropic; do
            if [[ -f "coverage_${provider}/coverage.xml" ]]; then
              COVERAGE=$(python -c "
              import xml.etree.ElementTree as ET
              tree = ET.parse('coverage_${provider}/coverage.xml')
              root = tree.getroot()
              coverage = root.attrib.get('line-rate', '0')
              print(f'{float(coverage)*100:.1f}%')
              " 2>/dev/null || echo "N/A")
              
              SUMMARY+="- **${provider^}**: ${COVERAGE}\n"
            fi
          done
          
          echo "coverage-summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  quality-gate:
    runs-on: ubuntu-latest
    needs: [analyze-changes, run-tests, analyze-coverage]
    if: needs.analyze-changes.outputs.needs-tests == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Quality Gate Check
        id: quality-gate
        run: |
          # Define quality thresholds
          MIN_COVERAGE=70
          
          # Check if tests pass basic quality requirements
          QUALITY_PASSED=true
          QUALITY_ISSUES=""
          
          # Add quality checks here
          echo "quality-passed=$QUALITY_PASSED" >> $GITHUB_OUTPUT
          echo "quality-issues=$QUALITY_ISSUES" >> $GITHUB_OUTPUT

  create-pr-comment:
    runs-on: ubuntu-latest
    needs: [analyze-changes, run-tests, analyze-coverage, quality-gate]
    if: github.event_name == 'pull_request' && needs.analyze-changes.outputs.needs-tests == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download generated tests (OpenAI)
        uses: actions/download-artifact@v3
        with:
          name: generated-tests-openai
          path: generated_tests_openai/
          
      - name: Create PR comment
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Generate comment content
            let comment = `## 🚀 TestPilot Analysis Results\n\n`;
            comment += `**Files analyzed:** ${{ needs.analyze-changes.outputs.python-files }}\n\n`;
            
            // Add generated tests info
            comment += `### 🧪 Generated Tests\n\n`;
            
            try {
              const testFiles = fs.readdirSync('generated_tests_openai/');
              if (testFiles.length > 0) {
                comment += `**Generated ${testFiles.length} test file(s):**\n`;
                testFiles.forEach(file => {
                  comment += `- \`${file}\`\n`;
                });
              } else {
                comment += `⚠️ No test files were generated.\n`;
              }
            } catch (error) {
              comment += `⚠️ Unable to read generated test files.\n`;
            }
            
            comment += `\n### 📊 Coverage Analysis\n\n`;
            comment += `${{ needs.analyze-coverage.outputs.coverage-summary || 'Coverage analysis not available' }}\n\n`;
            
            comment += `### ✅ Quality Gate\n\n`;
            const qualityPassed = '${{ needs.quality-gate.outputs.quality-passed }}' === 'true';
            comment += qualityPassed ? '✅ All quality checks passed!' : '⚠️ Quality issues detected';
            
            comment += `\n\n---\n*Generated by TestPilot AI Testing Co-Pilot*`;
            
            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  auto-triage:
    runs-on: ubuntu-latest
    needs: [analyze-changes, run-tests]
    if: failure() && needs.analyze-changes.outputs.needs-tests == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install TestPilot
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          
      - name: Auto-triage test failures
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the repository name
          REPO="${{ github.repository }}"
          
          # Check for test failures and create issues
          for test_file in generated_tests_ci/test_*.py; do
            if [[ -f "$test_file" ]]; then
              echo "🔍 Checking $test_file for failures"
              python -m testpilot.cli triage "$test_file" --repo "$REPO" || echo "Triage completed for $test_file"
            fi
          done

  benchmark:
    runs-on: ubuntu-latest
    needs: [analyze-changes, run-tests]
    if: needs.analyze-changes.outputs.needs-tests == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install TestPilot
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          
      - name: Benchmark test generation speed
        run: |
          echo "⏱️ Benchmarking TestPilot performance"
          
          # Time the test generation process
          start_time=$(date +%s)
          
          # Generate tests for benchmarking
          for file in ${{ needs.analyze-changes.outputs.python-files }}; do
            if [[ -f "$file" ]]; then
              echo "Benchmarking test generation for $file"
              timeout 300 python -m testpilot.cli generate "$file" --output-dir benchmark_tests/ || echo "Timeout or error for $file"
            fi
          done
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          
          echo "🎯 Test generation completed in ${duration} seconds"
          
          # Log performance metrics
          echo "## Performance Metrics" > performance_report.md
          echo "- **Total time**: ${duration}s" >> performance_report.md
          echo "- **Files processed**: $(echo '${{ needs.analyze-changes.outputs.python-files }}' | wc -w)" >> performance_report.md
          echo "- **Average time per file**: $((duration / $(echo '${{ needs.analyze-changes.outputs.python-files }}' | wc -w)))s" >> performance_report.md
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance_report.md
          retention-days: 30

  success-notification:
    runs-on: ubuntu-latest
    needs: [analyze-changes, run-tests, analyze-coverage, quality-gate]
    if: success() && needs.analyze-changes.outputs.needs-tests == 'true'
    steps:
      - name: Success notification
        run: |
          echo "🎉 TestPilot CI/CD pipeline completed successfully!"
          echo "✅ Generated tests for: ${{ needs.analyze-changes.outputs.python-files }}"
          echo "📊 Coverage analysis completed"
          echo "🚀 Quality gate passed"